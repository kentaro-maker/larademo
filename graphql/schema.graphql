"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {

    me: User @auth

    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    #ツイートを全て取得
    tweets: [Tweet!]! @all

    "Find a single user by an identifying attribute."
    tweet(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:content", "required_without:content"])

      "Search by email address."
      content: String @eq @rules(apply: ["prohibits:id", "required_without:id", "content"])
    ): Tweet @find
}

type Mutation {

    "Log out from the current session, showing the user one last time."
    logout: User @guard

    login(input: LoginInput @spread): AccessToken! @field(resolver: "App\\GraphQL\\Mutations\\AuthMutation@login")
    
    #ツイート作成
    createTweet(content: String!): Tweet! @create

    #ツイートアップデート
    updateTweet(id: ID!, content: String!): Tweet! @update

    #ツイート削除
    deleteTweet(id: ID!): Tweet! @delete

}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Tweet {
    id: ID!
    content: String!
    created_at: DateTime!
}

type AccessToken {
  token: String!
}

input LoginInput {
  email: String! @rules(apply: ["email"])
  password: String!
}